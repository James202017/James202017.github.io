#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤ –¥–ª—è GitHub Codespaces
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./debug-bots.sh

echo "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–æ–≤ –≤ GitHub Codespaces"
echo "=================================================="

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo -e "\nüìã 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
if [ -f ".env" ]; then
    echo "‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω"
    while IFS= read -r line; do
        if [[ $line =~ BOT_TOKEN_([A-Z_]+)=(.+) ]]; then
            bot_name="${BASH_REMATCH[1]}"
            token="${BASH_REMATCH[2]}"
            token_length=${#token}
            if [ $token_length -gt 10 ]; then
                echo "‚úÖ $bot_name —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª–∏–Ω–∞: $token_length)"
            else
                echo "‚ùå $bot_name —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"
            fi
        fi
    done < .env
else
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example"
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo -e "\nüê≥ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
if command -v docker &> /dev/null; then
    containers=$(docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}")
    if [ -n "$containers" ]; then
        echo "$containers"
    else
        echo "‚ùå –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    fi
else
    echo "‚ùå Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo -e "\nüìù 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –±–æ—Ç–æ–≤:"
bot_names=("bot_p" "bot_pr" "bot_inv" "bot_str" "bot_ocenka")
for bot in "${bot_names[@]}"; do
    echo -e "\n--- –õ–æ–≥–∏ $bot ---"
    if docker ps -a --format "{{.Names}}" | grep -q "^${bot}$"; then
        docker logs "$bot" --tail 10 2>&1 || echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ $bot"
    else
        echo "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $bot –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
done

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
echo -e "\nüåê 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API:"
if curl -s --connect-timeout 10 https://api.telegram.org > /dev/null; then
    echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram API"
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python
echo -e "\nüêç 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python:"
python_processes=$(ps aux | grep -E "python.*BOT_" | grep -v grep)
if [ -n "$python_processes" ]; then
    echo "‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–æ–≤:"
    echo "$python_processes"
else
    echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

# 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
echo -e "\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:"
echo "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ BOT_TOKEN_* –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env"
echo "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –≤ @BotFather"
echo "3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ADMIN_CHAT_ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"
echo "4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: docker compose restart"
echo "5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose logs -f"

echo -e "\nüîß –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
echo "docker compose down && docker compose up -d"
echo "docker compose logs -f bot_p"

# –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
chmod +x "$0" 2>/dev/null || true