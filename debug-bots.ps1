# –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤ –¥–ª—è GitHub Codespaces
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\debug-bots.ps1

Write-Host "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–æ–≤ –≤ GitHub Codespaces" -ForegroundColor Cyan
Write-Host "=" * 50 -ForegroundColor Gray

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
Write-Host "`nüìã 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:" -ForegroundColor Yellow
if (Test-Path ".env") {
    Write-Host "‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω" -ForegroundColor Green
    $envContent = Get-Content ".env" | Where-Object { $_ -match "BOT_TOKEN" }
    foreach ($line in $envContent) {
        if ($line -match "BOT_TOKEN_(\w+)=(.+)") {
            $botName = $matches[1]
            $tokenLength = $matches[2].Length
            if ($tokenLength -gt 10) {
                Write-Host "‚úÖ $botName —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª–∏–Ω–∞: $tokenLength)" -ForegroundColor Green
            } else {
                Write-Host "‚ùå $botName —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π" -ForegroundColor Red
            }
        }
    }
} else {
    Write-Host "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!" -ForegroundColor Red
    Write-Host "üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example" -ForegroundColor Yellow
}

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
Write-Host "`nüê≥ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:" -ForegroundColor Yellow
try {
    $containers = docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    if ($containers) {
        Write-Host $containers
    } else {
        Write-Host "‚ùå –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $($_.Exception.Message)" -ForegroundColor Red
}

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
Write-Host "`nüìù 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –±–æ—Ç–æ–≤:" -ForegroundColor Yellow
$botNames = @("bot_p", "bot_pr", "bot_inv", "bot_str", "bot_ocenka")
foreach ($bot in $botNames) {
    Write-Host "`n--- –õ–æ–≥–∏ $bot ---" -ForegroundColor Cyan
    try {
        $logs = docker logs $bot --tail 10 2>&1
        if ($logs) {
            Write-Host $logs
        } else {
            Write-Host "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $bot –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ $bot" -ForegroundColor Red
    }
}

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
Write-Host "`nüåê 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API:" -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "https://api.telegram.org" -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram API: $($_.Exception.Message)" -ForegroundColor Red
}

# 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
Write-Host "`nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:" -ForegroundColor Yellow
Write-Host "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ BOT_TOKEN_* –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env" -ForegroundColor White
Write-Host "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –≤ @BotFather" -ForegroundColor White
Write-Host "3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ADMIN_CHAT_ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π" -ForegroundColor White
Write-Host "4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: docker compose restart" -ForegroundColor White
Write-Host "5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose logs -f" -ForegroundColor White

Write-Host "`nüîß –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:" -ForegroundColor Yellow
Write-Host "docker compose down && docker compose up -d" -ForegroundColor Gray
Write-Host "docker compose logs -f bot_p" -ForegroundColor Gray